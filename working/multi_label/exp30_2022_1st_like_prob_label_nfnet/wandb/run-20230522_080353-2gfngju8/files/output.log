#########################
#### Training
#### Fold: 2 | Image Size: (128, 1001) | Model: hf_hub:timm/eca_nfnet_l0 | Batch Size: 64 | Scheduler: cos
#### Num Train: 20,217 | Num Valid: 3,382



































































































































































































100%|██████████| 316/316 [07:21<00:00,  1.40s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 1 | Train Loss: 15.026086076905456 | Val Loss: 5.985202418433295 | Val Padded_cmAP : 0.4873811106210025


































































































































































































100%|██████████| 316/316 [07:18<00:00,  1.39s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 2 | Train Loss: 6.473156891291654 | Val Loss: 4.344026627363982 | Val Padded_cmAP : 0.6207014800159315




































































































































































































100%|██████████| 316/316 [07:17<00:00,  1.39s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]




























































































































































































100%|██████████| 316/316 [06:54<00:00,  1.31s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]








































































































































































































100%|██████████| 316/316 [07:19<00:00,  1.39s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 5 | Train Loss: 4.353505365456207 | Val Loss: 2.7699684037102594 | Val Padded_cmAP : 0.7886523056471901





































































































































































































100%|██████████| 316/316 [07:39<00:00,  1.45s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 6 | Train Loss: 4.144292746918111 | Val Loss: 2.767735825644599 | Val Padded_cmAP : 0.8067011019506757
































































































































































































100%|██████████| 316/316 [07:54<00:00,  1.50s/it]























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]


































































































































































































100%|██████████| 316/316 [07:38<00:00,  1.45s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
Epoch: 8 | Train Loss: 3.5520300020145466 | Val Loss: 2.308143361851021 | Val Padded_cmAP : 0.8435251768604789




























































































































































































100%|██████████| 316/316 [07:46<00:00,  1.48s/it]























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]




























































































































































































100%|██████████| 316/316 [07:50<00:00,  1.49s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]









































































































































































































100%|██████████| 316/316 [08:01<00:00,  1.52s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































































100%|██████████| 316/316 [08:02<00:00,  1.53s/it]























 93%|█████████▎| 25/27 [00:47<00:03,  1.81s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]




























































































































































































100%|██████████| 316/316 [08:15<00:00,  1.57s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
Epoch: 13 | Train Loss: 3.0301189905480492 | Val Loss: 2.0409267765504344 | Val Padded_cmAP : 0.8611370250081577







































































































































































































100%|██████████| 316/316 [08:00<00:00,  1.52s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 14 | Train Loss: 2.9998881077464623 | Val Loss: 2.0064845791569463 | Val Padded_cmAP : 0.8619836445407595




































































































































































































100%|██████████| 316/316 [08:09<00:00,  1.55s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.43s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]

































































































































































































100%|██████████| 316/316 [08:11<00:00,  1.56s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]































































































































































































100%|██████████| 316/316 [08:17<00:00,  1.58s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]









































































































































































































100%|██████████| 316/316 [08:16<00:00,  1.57s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]




































































































































































































100%|██████████| 316/316 [08:26<00:00,  1.60s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.45s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]









































































































































































































100%|██████████| 316/316 [08:24<00:00,  1.60s/it]























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































































100%|██████████| 316/316 [07:22<00:00,  1.40s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]
































































































































































































100%|██████████| 316/316 [07:30<00:00,  1.43s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 22 | Train Loss: 2.5419325749330883 | Val Loss: 1.894447335490474 | Val Padded_cmAP : 0.8728245347141996

































































































































































































100%|██████████| 316/316 [08:08<00:00,  1.55s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
Epoch: 23 | Train Loss: 2.495047829950912 | Val Loss: 1.8822732347029227 | Val Padded_cmAP : 0.8759561683413017




































































































































































































100%|██████████| 316/316 [07:58<00:00,  1.52s/it]























 93%|█████████▎| 25/27 [00:47<00:03,  1.80s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]







































































































































































































100%|██████████| 316/316 [08:12<00:00,  1.56s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 25 | Train Loss: 2.431847834888893 | Val Loss: 1.806053673779523 | Val Padded_cmAP : 0.877151518447308




































































































































































































100%|██████████| 316/316 [08:18<00:00,  1.58s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]



























































































































































































100%|██████████| 316/316 [08:27<00:00,  1.61s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 27 | Train Loss: 2.324205152218855 | Val Loss: 1.7993176270414282 | Val Padded_cmAP : 0.8820572622026204






































































































































































































100%|██████████| 316/316 [08:28<00:00,  1.61s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]


































































































































































































100%|██████████| 316/316 [08:30<00:00,  1.62s/it]























 96%|█████████▋| 26/27 [00:49<00:01,  1.79s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]


































































































































































































100%|██████████| 316/316 [08:27<00:00,  1.60s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]















































































































































































































100%|██████████| 316/316 [08:20<00:00,  1.58s/it]























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]






































































































































































































100%|██████████| 316/316 [08:23<00:00,  1.59s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]














































































































































































































100%|██████████| 316/316 [08:31<00:00,  1.62s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
Epoch: 33 | Train Loss: 2.1212226880502096 | Val Loss: 1.7674073069183915 | Val Padded_cmAP : 0.886557424160297








































































































































































































100%|██████████| 316/316 [08:35<00:00,  1.63s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]
















































































































































































































100%|██████████| 316/316 [08:27<00:00,  1.61s/it]























 96%|█████████▋| 26/27 [00:49<00:01,  1.79s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]












































































































































































































100%|██████████| 316/316 [07:52<00:00,  1.50s/it]























 96%|█████████▋| 26/27 [00:49<00:01,  1.80s/it]
100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
























































































































































































100%|██████████| 316/316 [06:27<00:00,  1.23s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]


















































































































































































100%|██████████| 316/316 [06:07<00:00,  1.16s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]























































































































































































100%|██████████| 316/316 [06:16<00:00,  1.19s/it]























 96%|█████████▋| 26/27 [00:49<00:01,  1.80s/it]
100%|██████████| 27/27 [00:50<00:00,  1.87s/it]


















































































































































































100%|██████████| 316/316 [06:06<00:00,  1.16s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]
















































































































































































100%|██████████| 316/316 [06:03<00:00,  1.15s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]

















































































































































































100%|██████████| 316/316 [06:05<00:00,  1.16s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]












































































































































































100%|██████████| 316/316 [05:54<00:00,  1.12s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]



















































































































































































100%|██████████| 316/316 [06:11<00:00,  1.18s/it]























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
  0%|          | 0/316 [00:00<?, ?it/s]
















































































































































































100%|██████████| 316/316 [06:07<00:00,  1.16s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 45 | Train Loss: 1.816090451765664 | Val Loss: 1.836193824255908 | Val Padded_cmAP : 0.8943840395639505














































































































































































100%|██████████| 316/316 [06:04<00:00,  1.16s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 46 | Train Loss: 1.798593066915681 | Val Loss: 1.831142438782586 | Val Padded_cmAP : 0.8943082049526718













































































































































































100%|██████████| 316/316 [05:52<00:00,  1.11s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 47 | Train Loss: 1.7894960166532783 | Val Loss: 1.8774115200395938 | Val Padded_cmAP : 0.8947287819037391











































































































































































100%|██████████| 316/316 [05:56<00:00,  1.13s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 48 | Train Loss: 1.7650780711747422 | Val Loss: 1.825578506346102 | Val Padded_cmAP : 0.8960012851238047






































































































































































100%|██████████| 316/316 [05:44<00:00,  1.09s/it]






















100%|██████████| 27/27 [00:50<00:00,  1.88s/it]
  0%|          | 0/316 [00:00<?, ?it/s]








































































































































































100%|██████████| 316/316 [05:51<00:00,  1.11s/it]
























100%|██████████| 27/27 [00:50<00:00,  1.87s/it]
Epoch: 50 | Train Loss: 1.7635009447230567 | Val Loss: 1.8054112769939281 | Val Padded_cmAP : 0.8962242839290543
# Loading best model
# Infering OOF
  4%|▎         | 1/27 [00:04<01:44,  4.00s/it]
  7%|▋         | 2/27 [00:05<01:07,  2.70s/it]
 11%|█         | 3/27 [00:07<00:54,  2.28s/it]
 15%|█▍        | 4/27 [00:09<00:47,  2.09s/it]
 22%|██▏       | 6/27 [00:12<00:40,  1.92s/it]
 26%|██▌       | 7/27 [00:14<00:37,  1.88s/it]
 30%|██▉       | 8/27 [00:16<00:35,  1.86s/it]
 33%|███▎      | 9/27 [00:18<00:33,  1.84s/it]
 37%|███▋      | 10/27 [00:20<00:31,  1.83s/it]
 41%|████      | 11/27 [00:21<00:29,  1.83s/it]
 44%|████▍     | 12/27 [00:23<00:27,  1.82s/it]
 48%|████▊     | 13/27 [00:25<00:25,  1.82s/it]
 52%|█████▏    | 14/27 [00:27<00:23,  1.82s/it]
 59%|█████▉    | 16/27 [00:31<00:20,  1.82s/it]
 63%|██████▎   | 17/27 [00:32<00:18,  1.82s/it]
 67%|██████▋   | 18/27 [00:34<00:16,  1.83s/it]
 70%|███████   | 19/27 [00:36<00:14,  1.83s/it]
 74%|███████▍  | 20/27 [00:38<00:12,  1.82s/it]
 78%|███████▊  | 21/27 [00:40<00:10,  1.82s/it]
 81%|████████▏ | 22/27 [00:42<00:09,  1.82s/it]
 85%|████████▌ | 23/27 [00:43<00:07,  1.82s/it]
 89%|████████▉ | 24/27 [00:45<00:05,  1.82s/it]
 93%|█████████▎| 25/27 [00:47<00:03,  1.81s/it]
wandb :   0%|          | 2/700 [00:00<00:53, 12.93it/s]data.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   0%|          | 2/700 [00:00<00:53, 12.93it/s]data.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
>>> FOLD 2 Primary_Padded_cmAP = 0.896
wandb :   5%|▍         | 33/700 [00:02<00:47, 14.09it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   8%|▊         | 59/700 [00:04<00:49, 12.99it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  12%|█▏        | 86/700 [00:06<00:36, 16.80it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  18%|█▊        | 123/700 [00:08<00:31, 18.41it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  22%|██▏       | 154/700 [00:10<00:39, 13.94it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  27%|██▋       | 189/700 [00:12<00:26, 19.63it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  30%|███       | 212/700 [00:14<00:33, 14.46it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  33%|███▎      | 228/700 [00:16<01:00,  7.74it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  36%|███▌      | 253/700 [00:17<00:33, 13.35it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  40%|████      | 283/700 [00:20<00:38, 10.78it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  42%|████▏     | 297/700 [00:21<00:38, 10.54it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  46%|████▌     | 321/700 [00:26<00:33, 11.44it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  50%|████▉     | 348/700 [00:27<00:21, 16.67it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  53%|█████▎    | 368/700 [00:30<00:24, 13.28it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  57%|█████▋    | 401/700 [00:32<00:18, 15.99it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  61%|██████▏   | 430/700 [00:34<00:14, 19.22it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  66%|██████▌   | 459/700 [00:36<00:17, 14.10it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  70%|██████▉   | 488/700 [00:38<00:11, 18.10it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  74%|███████▍  | 518/700 [00:40<00:17, 10.42it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  78%|███████▊  | 545/700 [00:42<00:13, 11.88it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  82%|████████▏ | 575/700 [00:44<00:06, 18.56it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  85%|████████▌ | 598/700 [00:46<00:11,  9.07it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  86%|████████▋ | 604/700 [00:47<00:13,  6.90it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  87%|████████▋ | 608/700 [00:50<00:35,  2.59it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  93%|█████████▎| 648/700 [00:52<00:02, 22.24it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  97%|█████████▋| 680/700 [00:54<00:01, 17.38it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 700/700 [00:55<00:00, 12.64it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 700/700 [00:55<00:00, 12.64it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`