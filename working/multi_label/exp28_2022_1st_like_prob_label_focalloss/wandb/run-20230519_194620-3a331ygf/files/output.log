load pre-trained model :  /kaggle/working/WSL/exp10_softmax_model/fold-1.pth
_IncompatibleKeys(missing_keys=['bn0.weight', 'bn0.bias', 'bn0.running_mean', 'bn0.running_var', 'fc1.weight', 'fc1.bias', 'global_pool.p', 'head.weight', 'head.bias'], unexpected_keys=[])
#########################
#### Training
#### Fold: 2 | Image Size: (128, 1001) | Model: tf_efficientnet_b1_ns | Batch Size: 64 | Scheduler: cos
#### Num Train: 20,217 | Num Valid: 3,382















































































































































































100%|██████████| 316/316 [06:41<00:00,  1.27s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 1 | Train Loss: 18.782335308533682 | Val Loss: 6.110621611277263 | Val Padded_cmAP : 0.48140809617827435









































































































































































100%|██████████| 316/316 [06:29<00:00,  1.23s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 2 | Train Loss: 6.5829445516006855 | Val Loss: 4.723830143610637 | Val Padded_cmAP : 0.5700112272525816








































































































































































100%|██████████| 316/316 [06:38<00:00,  1.26s/it]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]














































































































































































100%|██████████| 316/316 [06:35<00:00,  1.25s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]










































































































































































100%|██████████| 316/316 [06:24<00:00,  1.22s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
Epoch: 5 | Train Loss: 4.065344803695437 | Val Loss: 2.4031981318085283 | Val Padded_cmAP : 0.8350019039168206












































































































































































100%|██████████| 316/316 [06:18<00:00,  1.20s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
Epoch: 6 | Train Loss: 3.7572306485115727 | Val Loss: 2.2809245453940497 | Val Padded_cmAP : 0.8437927621302481


































































































































































100%|██████████| 316/316 [05:59<00:00,  1.14s/it]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































100%|██████████| 316/316 [05:50<00:00,  1.11s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 8 | Train Loss: 3.344749522360065 | Val Loss: 2.1340420488958007 | Val Padded_cmAP : 0.8592624932697537






































































































































































100%|██████████| 316/316 [06:06<00:00,  1.16s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]































































































































































100%|██████████| 316/316 [05:58<00:00,  1.13s/it]









100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































100%|██████████| 316/316 [06:03<00:00,  1.15s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]





























































































































































100%|██████████| 316/316 [05:43<00:00,  1.09s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]






























































































































































100%|██████████| 316/316 [05:42<00:00,  1.08s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































100%|██████████| 316/316 [05:35<00:00,  1.06s/it]









100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]































































































































































100%|██████████| 316/316 [05:31<00:00,  1.05s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]



























































































































































100%|██████████| 316/316 [05:19<00:00,  1.01s/it]










 93%|█████████▎| 25/27 [00:20<00:01,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]


























































































































































100%|██████████| 316/316 [05:29<00:00,  1.04s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]
























































































































































100%|██████████| 316/316 [05:17<00:00,  1.00s/it]










 96%|█████████▋| 26/27 [00:21<00:00,  1.39it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]

























































































































































100%|██████████| 316/316 [05:25<00:00,  1.03s/it]










100%|██████████| 27/27 [00:21<00:00,  1.66it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]


























































































































































100%|██████████| 316/316 [05:24<00:00,  1.03s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
Epoch: 20 | Train Loss: 2.5505786911596227 | Val Loss: 1.9652751706264637 | Val Padded_cmAP : 0.8736745078125826



























































































































































100%|██████████| 316/316 [05:23<00:00,  1.02s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
Epoch: 21 | Train Loss: 2.5156693654724314 | Val Loss: 1.8497879372702704 | Val Padded_cmAP : 0.8757553212874235

























































































































































100%|██████████| 316/316 [05:22<00:00,  1.02s/it]










 96%|█████████▋| 26/27 [00:21<00:00,  1.39it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]




























































































































































100%|██████████| 316/316 [05:28<00:00,  1.04s/it]









100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]


























































































































































100%|██████████| 316/316 [05:28<00:00,  1.04s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

























































































































































100%|██████████| 316/316 [05:24<00:00,  1.03s/it]









100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]
































































































































































100%|██████████| 316/316 [05:33<00:00,  1.05s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]


























































































































































100%|██████████| 316/316 [05:29<00:00,  1.04s/it]










 96%|█████████▋| 26/27 [00:21<00:00,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.23it/s]





























































































































































100%|██████████| 316/316 [05:29<00:00,  1.04s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
Epoch: 28 | Train Loss: 2.2803162502337107 | Val Loss: 1.98572172721227 | Val Padded_cmAP : 0.8785029116567697


























































































































































100%|██████████| 316/316 [05:25<00:00,  1.03s/it]









100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
  0%|          | 0/316 [00:00<?, ?it/s]



























































































































































100%|██████████| 316/316 [05:22<00:00,  1.02s/it]










 96%|█████████▋| 26/27 [00:21<00:00,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]































































































































































100%|██████████| 316/316 [05:43<00:00,  1.09s/it]










 96%|█████████▋| 26/27 [00:21<00:00,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
























































































































































100%|██████████| 316/316 [05:27<00:00,  1.04s/it]









 93%|█████████▎| 25/27 [00:20<00:01,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
































































































































































100%|██████████| 316/316 [05:51<00:00,  1.11s/it]









100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]































































































































































100%|██████████| 316/316 [05:40<00:00,  1.08s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 34 | Train Loss: 2.11834486036361 | Val Loss: 1.8087896550143208 | Val Padded_cmAP : 0.8869486811808928


































































































































































100%|██████████| 316/316 [05:46<00:00,  1.10s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 35 | Train Loss: 2.0890383014950573 | Val Loss: 1.6858016120062933 | Val Padded_cmAP : 0.892914612221231






































































































































































100%|██████████| 316/316 [05:45<00:00,  1.09s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]




























































































































































100%|██████████| 316/316 [05:28<00:00,  1.04s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]





























































































































































100%|██████████| 316/316 [05:35<00:00,  1.06s/it]










 93%|█████████▎| 25/27 [00:20<00:01,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]




























































































































































100%|██████████| 316/316 [05:34<00:00,  1.06s/it]









100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]


































































































































































100%|██████████| 316/316 [05:38<00:00,  1.07s/it]









100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]






























































































































































100%|██████████| 316/316 [05:34<00:00,  1.06s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 41 | Train Loss: 1.9812770153902755 | Val Loss: 1.8101669792775754 | Val Padded_cmAP : 0.890815190864027


























































































































































100%|██████████| 316/316 [05:23<00:00,  1.02s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]






























































































































































100%|██████████| 316/316 [05:29<00:00,  1.04s/it]









100%|██████████| 27/27 [00:22<00:00,  1.21it/s]
  0%|          | 0/316 [00:00<?, ?it/s]


























































































































































100%|██████████| 316/316 [05:28<00:00,  1.04s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 44 | Train Loss: 1.9205979938748516 | Val Loss: 1.792832734408202 | Val Padded_cmAP : 0.8936064696819089































































































































































100%|██████████| 316/316 [05:37<00:00,  1.07s/it]









100%|██████████| 27/27 [00:22<00:00,  1.21it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































100%|██████████| 316/316 [05:35<00:00,  1.06s/it]









 93%|█████████▎| 25/27 [00:20<00:01,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]



























































































































































100%|██████████| 316/316 [05:29<00:00,  1.04s/it]










 96%|█████████▋| 26/27 [00:21<00:00,  1.38it/s]
100%|██████████| 27/27 [00:22<00:00,  1.22it/s]

























































































































































100%|██████████| 316/316 [05:25<00:00,  1.03s/it]










100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
Epoch: 48 | Train Loss: 1.8785243551187878 | Val Loss: 1.81631381644143 | Val Padded_cmAP : 0.8935481567479328



























































































































































100%|██████████| 316/316 [05:28<00:00,  1.04s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

























































































































































100%|██████████| 316/316 [05:20<00:00,  1.01s/it]










100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
Epoch: 50 | Train Loss: 1.8795445874522003 | Val Loss: 1.7535788483089871 | Val Padded_cmAP : 0.8964371066892267
# Loading best model
# Infering OOF
  7%|▋         | 2/27 [00:02<00:32,  1.31s/it]
 19%|█▊        | 5/27 [00:04<00:18,  1.18it/s]
 30%|██▉       | 8/27 [00:07<00:14,  1.31it/s]
 37%|███▋      | 10/27 [00:08<00:12,  1.34it/s]
 48%|████▊     | 13/27 [00:10<00:10,  1.37it/s]
 59%|█████▉    | 16/27 [00:12<00:07,  1.39it/s]
 70%|███████   | 19/27 [00:15<00:05,  1.38it/s]
 81%|████████▏ | 22/27 [00:17<00:03,  1.39it/s]
 89%|████████▉ | 24/27 [00:18<00:02,  1.39it/s]
wandb :   0%|          | 0/707 [00:00<?, ?it/s]andas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   0%|          | 0/707 [00:00<?, ?it/s]andas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
>>> FOLD 2 Primary_Padded_cmAP = 0.896
wandb :   5%|▍         | 34/707 [00:02<00:44, 15.14it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   8%|▊         | 58/707 [00:03<00:44, 14.49it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  13%|█▎        | 91/707 [00:06<00:34, 17.70it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  19%|█▊        | 132/707 [00:07<00:25, 22.49it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  23%|██▎       | 164/707 [00:09<00:31, 17.02it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  28%|██▊       | 197/707 [00:11<00:23, 21.82it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  32%|███▏      | 227/707 [00:14<00:32, 14.80it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  35%|███▌      | 248/707 [00:16<00:28, 15.88it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  39%|███▉      | 275/707 [00:17<00:22, 19.55it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  43%|████▎     | 301/707 [00:20<00:35, 11.38it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  43%|████▎     | 307/707 [00:20<00:26, 15.23it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  49%|████▉     | 348/707 [00:25<00:23, 15.36it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  52%|█████▏    | 368/707 [00:27<00:27, 12.44it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  55%|█████▌    | 392/707 [00:30<00:23, 13.13it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  61%|██████    | 430/707 [00:32<00:17, 16.13it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  65%|██████▌   | 460/707 [00:33<00:11, 21.70it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  69%|██████▉   | 488/707 [00:36<00:15, 14.33it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  74%|███████▍  | 524/707 [00:37<00:08, 21.92it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  78%|███████▊  | 550/707 [00:39<00:09, 17.01it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  83%|████████▎ | 587/707 [00:42<00:06, 18.57it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  86%|████████▌ | 609/707 [00:43<00:09, 10.51it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  87%|████████▋ | 613/707 [00:44<00:12,  7.66it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  89%|████████▉ | 629/707 [00:48<00:08,  8.98it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  94%|█████████▍| 666/707 [00:49<00:02, 18.80it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 707/707 [00:52<00:00, 13.58it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 707/707 [00:52<00:00, 13.58it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`