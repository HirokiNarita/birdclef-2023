load pre-trained model :  /kaggle/working/WSL/exp10_softmax_model/fold-3.pth
_IncompatibleKeys(missing_keys=['bn0.weight', 'bn0.bias', 'bn0.running_mean', 'bn0.running_var', 'fc1.weight', 'fc1.bias', 'global_pool.p', 'head.weight', 'head.bias'], unexpected_keys=[])
#########################
#### Training
#### Fold: 4 | Image Size: (128, 1001) | Model: tf_efficientnet_b1_ns | Batch Size: 64 | Scheduler: cos
#### Num Train: 19,623 | Num Valid: 3,381































































































































































100%|██████████| 307/307 [06:05<00:00,  1.19s/it]









 93%|█████████▎| 25/27 [00:20<00:01,  1.41it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]





























































































































































100%|██████████| 307/307 [05:48<00:00,  1.14s/it]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 2 | Train Loss: 6.161485001007975 | Val Loss: 4.678512193538524 | Val Padded_cmAP : 0.5660092474330529


























































































































































100%|██████████| 307/307 [05:55<00:00,  1.16s/it]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 3 | Train Loss: 4.890457075659538 | Val Loss: 3.0132070073374995 | Val Padded_cmAP : 0.7429026127084117

































































































































































100%|██████████| 307/307 [05:59<00:00,  1.17s/it]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



























































































































































100%|██████████| 307/307 [05:46<00:00,  1.13s/it]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 5 | Train Loss: 3.394643873655835 | Val Loss: 2.289810805409043 | Val Padded_cmAP : 0.819743077689195






























































































































































100%|██████████| 307/307 [05:49<00:00,  1.14s/it]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 6 | Train Loss: 3.1475104400311698 | Val Loss: 2.267248030062075 | Val Padded_cmAP : 0.8310424634851765





























































































































































100%|██████████| 307/307 [05:52<00:00,  1.15s/it]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 7 | Train Loss: 2.8676487778219415 | Val Loss: 2.1105409374943487 | Val Padded_cmAP : 0.8445045131695477
























































































































































100%|██████████| 307/307 [05:29<00:00,  1.07s/it]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



























































































































































100%|██████████| 307/307 [05:40<00:00,  1.11s/it]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 9 | Train Loss: 2.53777536118846 | Val Loss: 2.0749023071041814 | Val Padded_cmAP : 0.8518017674107625
























































































































































100%|██████████| 307/307 [05:25<00:00,  1.06s/it]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]























































































































































100%|██████████| 307/307 [05:23<00:00,  1.05s/it]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]













































































































































100%|██████████| 307/307 [04:57<00:00,  1.03it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]










































































































































100%|██████████| 307/307 [04:48<00:00,  1.06it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]










































































































































100%|██████████| 307/307 [04:43<00:00,  1.08it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]












































































































































100%|██████████| 307/307 [04:47<00:00,  1.07it/s]









 93%|█████████▎| 25/27 [00:20<00:01,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]














































































































































100%|██████████| 307/307 [04:49<00:00,  1.06it/s]










100%|██████████| 27/27 [00:21<00:00,  1.68it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]











































































































































100%|██████████| 307/307 [04:46<00:00,  1.07it/s]










 93%|█████████▎| 25/27 [00:20<00:01,  1.39it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]












































































































































100%|██████████| 307/307 [04:52<00:00,  1.05it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 18 | Train Loss: 2.003347676429376 | Val Loss: 1.972032529336435 | Val Padded_cmAP : 0.8664302111431913









































































































































100%|██████████| 307/307 [04:46<00:00,  1.07it/s]









 93%|█████████▎| 25/27 [00:20<00:01,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]











































































































































100%|██████████| 307/307 [04:44<00:00,  1.08it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]








































































































































100%|██████████| 307/307 [04:43<00:00,  1.08it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]










































































































































100%|██████████| 307/307 [04:44<00:00,  1.08it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]









































































































































100%|██████████| 307/307 [04:42<00:00,  1.09it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]










































































































































100%|██████████| 307/307 [04:44<00:00,  1.08it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]











































































































































100%|██████████| 307/307 [04:46<00:00,  1.07it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]









































































































































100%|██████████| 307/307 [04:44<00:00,  1.08it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]




































































































































100%|██████████| 307/307 [04:33<00:00,  1.12it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]













































































































































100%|██████████| 307/307 [04:52<00:00,  1.05it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]






































































































































100%|██████████| 307/307 [04:41<00:00,  1.09it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]












































































































































100%|██████████| 307/307 [04:44<00:00,  1.08it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 30 | Train Loss: 1.678346001364121 | Val Loss: 1.8130649659368727 | Val Padded_cmAP : 0.873540042833899








































































































































100%|██████████| 307/307 [04:41<00:00,  1.09it/s]









 93%|█████████▎| 25/27 [00:20<00:01,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]














































































































































100%|██████████| 307/307 [04:54<00:00,  1.04it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]







































































































































100%|██████████| 307/307 [04:37<00:00,  1.11it/s]










 93%|█████████▎| 25/27 [00:20<00:01,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]







































































































































100%|██████████| 307/307 [04:43<00:00,  1.08it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]





































































































































100%|██████████| 307/307 [04:34<00:00,  1.12it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 35 | Train Loss: 1.5524395302374898 | Val Loss: 1.8925806526784543 | Val Padded_cmAP : 0.8819126226190804








































































































































100%|██████████| 307/307 [04:44<00:00,  1.08it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]








































































































































100%|██████████| 307/307 [04:40<00:00,  1.10it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]










































































































































100%|██████████| 307/307 [04:46<00:00,  1.07it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]








































































































































100%|██████████| 307/307 [04:40<00:00,  1.09it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]






































































































































100%|██████████| 307/307 [04:35<00:00,  1.11it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]


































































































































100%|██████████| 307/307 [04:30<00:00,  1.13it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]












































































































































100%|██████████| 307/307 [04:50<00:00,  1.06it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 42 | Train Loss: 1.4749447120905699 | Val Loss: 1.7376844099274389 | Val Padded_cmAP : 0.8856778052838237






































































































































100%|██████████| 307/307 [04:38<00:00,  1.10it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 43 | Train Loss: 1.430936032863704 | Val Loss: 1.702415974051864 | Val Padded_cmAP : 0.8855362928012102











































































































































100%|██████████| 307/307 [04:46<00:00,  1.07it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 44 | Train Loss: 1.4282783145624962 | Val Loss: 1.7718033680209406 | Val Padded_cmAP : 0.884592793017887






































































































































100%|██████████| 307/307 [04:37<00:00,  1.11it/s]









 93%|█████████▎| 25/27 [00:20<00:01,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]








































































































































100%|██████████| 307/307 [04:40<00:00,  1.09it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 46 | Train Loss: 1.3976300288877581 | Val Loss: 1.7131902012560103 | Val Padded_cmAP : 0.8862123933704071




































































































































100%|██████████| 307/307 [04:30<00:00,  1.13it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]








































































































































100%|██████████| 307/307 [04:40<00:00,  1.09it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 48 | Train Loss: 1.395995607593549 | Val Loss: 1.723271784959016 | Val Padded_cmAP : 0.886101099258843










































































































































100%|██████████| 307/307 [04:43<00:00,  1.08it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 49 | Train Loss: 1.386385617698831 | Val Loss: 1.6859896977742512 | Val Padded_cmAP : 0.8872629561179728










































































































































100%|██████████| 307/307 [04:45<00:00,  1.08it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/27 [00:00<?, ?it/s]
Epoch: 50 | Train Loss: 1.3665051134090858 | Val Loss: 1.6900134726806924 | Val Padded_cmAP : 0.8868723959909169
# Loading best model
  7%|▋         | 2/27 [00:02<00:32,  1.32s/it]
 19%|█▊        | 5/27 [00:05<00:18,  1.19it/s]
 30%|██▉       | 8/27 [00:07<00:14,  1.33it/s]
 37%|███▋      | 10/27 [00:08<00:12,  1.37it/s]
 48%|████▊     | 13/27 [00:10<00:10,  1.39it/s]
 59%|█████▉    | 16/27 [00:12<00:07,  1.40it/s]
 70%|███████   | 19/27 [00:15<00:05,  1.40it/s]
 81%|████████▏ | 22/27 [00:17<00:03,  1.40it/s]
 89%|████████▉ | 24/27 [00:18<00:02,  1.41it/s]
  self[col] = igetitem(value, i)ckages/pandas/core/frame.py:3678: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  self[col] = igetitem(value, i)ckages/pandas/core/frame.py:3678: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
>>> FOLD 4 Primary_Padded_cmAP = 0.887
wandb :   3%|▎         | 21/683 [00:01<00:34, 19.30it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   8%|▊         | 56/683 [00:03<00:29, 20.90it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  14%|█▍        | 97/683 [00:05<00:28, 20.77it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  20%|██        | 138/683 [00:07<00:27, 19.64it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  24%|██▍       | 166/683 [00:09<00:38, 13.57it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  29%|██▉       | 201/683 [00:11<00:26, 18.04it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  34%|███▍      | 234/683 [00:13<00:24, 18.29it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  38%|███▊      | 260/683 [00:15<00:19, 21.50it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  42%|████▏     | 289/683 [00:17<00:33, 11.69it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  48%|████▊     | 326/683 [00:19<00:20, 17.47it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  53%|█████▎    | 361/683 [00:21<00:15, 20.86it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  59%|█████▉    | 404/683 [00:23<00:13, 20.90it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  66%|██████▌   | 450/683 [00:25<00:10, 21.76it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  72%|███████▏  | 490/683 [00:27<00:09, 20.39it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  77%|███████▋  | 526/683 [00:29<00:07, 21.55it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  82%|████████▏ | 562/683 [00:31<00:06, 19.09it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  84%|████████▍ | 577/683 [00:33<00:12,  8.24it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  89%|████████▊ | 605/683 [00:35<00:08,  9.51it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  94%|█████████▎| 639/683 [00:37<00:02, 19.49it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  97%|█████████▋| 663/683 [00:39<00:01, 14.31it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 683/683 [00:40<00:00, 16.86it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 683/683 [00:40<00:00, 16.86it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`