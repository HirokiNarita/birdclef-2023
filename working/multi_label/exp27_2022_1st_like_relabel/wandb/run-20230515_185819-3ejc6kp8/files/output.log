
  0%|          | 0/307 [00:00<?, ?it/s]
load pre-trained model :  /kaggle/working/WSL/exp10_softmax_model/fold-1.pth
_IncompatibleKeys(missing_keys=['bn0.weight', 'bn0.bias', 'bn0.running_mean', 'bn0.running_var', 'fc1.weight', 'fc1.bias', 'global_pool.p', 'head.weight', 'head.bias'], unexpected_keys=[])
#########################
#### Training
#### Fold: 2 | Image Size: (128, 1001) | Model: tf_efficientnet_b1_ns | Batch Size: 64 | Scheduler: cos






























































































































100%|██████████| 307/307 [04:27<00:00,  1.15it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 1 | Train Loss: 18.220036079518568 | Val Loss: 6.165069686041938 | Val Padded_cmAP : 0.4820069698272035































































































































100%|██████████| 307/307 [04:18<00:00,  1.19it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 2 | Train Loss: 6.135091079562805 | Val Loss: 4.629671856209084 | Val Padded_cmAP : 0.5707470240251616
































































































































100%|██████████| 307/307 [04:21<00:00,  1.18it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 3 | Train Loss: 4.883480071244876 | Val Loss: 3.0416571917357267 | Val Padded_cmAP : 0.7518515852797795

































































































































100%|██████████| 307/307 [04:25<00:00,  1.16it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 4 | Train Loss: 3.91762585981661 | Val Loss: 2.489039937655131 | Val Padded_cmAP : 0.8099610114030302



































































































































100%|██████████| 307/307 [04:29<00:00,  1.14it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 5 | Train Loss: 3.4121517467188136 | Val Loss: 2.404389399069327 | Val Padded_cmAP : 0.8316605190510005
































































































































100%|██████████| 307/307 [04:23<00:00,  1.17it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 6 | Train Loss: 3.1621826883247697 | Val Loss: 2.218324723067107 | Val Padded_cmAP : 0.8439075485289153




































































































































100%|██████████| 307/307 [04:29<00:00,  1.14it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]































































































































100%|██████████| 307/307 [04:18<00:00,  1.19it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]































































































































100%|██████████| 307/307 [04:19<00:00,  1.18it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



























































































































100%|██████████| 307/307 [04:12<00:00,  1.22it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]






























































































































100%|██████████| 307/307 [04:17<00:00,  1.19it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]





























































































































100%|██████████| 307/307 [04:14<00:00,  1.20it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 12 | Train Loss: 2.320647709921051 | Val Loss: 1.8800244993633695 | Val Padded_cmAP : 0.8675485873190526




























































































































100%|██████████| 307/307 [04:13<00:00,  1.21it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:08<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 14 | Train Loss: 2.1998137433676455 | Val Loss: 2.052452522295493 | Val Padded_cmAP : 0.8706389467139669

































































































































100%|██████████| 307/307 [04:22<00:00,  1.17it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.38it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]




























































































































100%|██████████| 307/307 [04:12<00:00,  1.21it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 16 | Train Loss: 2.094518085256073 | Val Loss: 1.9584865481765181 | Val Padded_cmAP : 0.8710659388020975


























































































































100%|██████████| 307/307 [04:08<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 17 | Train Loss: 2.0593257086284775 | Val Loss: 1.9925366485560383 | Val Padded_cmAP : 0.867874441708844

























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 18 | Train Loss: 2.0501419919321515 | Val Loss: 2.0715126108240196 | Val Padded_cmAP : 0.8734618267850107

























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
Epoch: 19 | Train Loss: 1.9779335322519855 | Val Loss: 1.8917131247343841 | Val Padded_cmAP : 0.87744438965868



























































































































100%|██████████| 307/307 [04:10<00:00,  1.22it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:09<00:00,  1.23it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.39it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]


























































































































100%|██████████| 307/307 [04:10<00:00,  1.23it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]


























































































































100%|██████████| 307/307 [04:09<00:00,  1.23it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
Epoch: 23 | Train Loss: 1.856557591341994 | Val Loss: 1.8473867023432697 | Val Padded_cmAP : 0.8804636137950085



























































































































100%|██████████| 307/307 [04:11<00:00,  1.22it/s]









100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:06<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]


























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]
























































































































100%|██████████| 307/307 [04:06<00:00,  1.25it/s]









100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:06<00:00,  1.24it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]









100%|██████████| 27/27 [00:22<00:00,  1.22it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]










 93%|█████████▎| 25/27 [00:20<00:01,  1.39it/s]
100%|██████████| 27/27 [00:21<00:00,  1.23it/s]
























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]









 89%|████████▉ | 24/27 [00:19<00:02,  1.39it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]

























































































































100%|██████████| 307/307 [04:07<00:00,  1.24it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.38it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]





























































































































100%|██████████| 307/307 [04:14<00:00,  1.21it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
Epoch: 34 | Train Loss: 1.5693216393747236 | Val Loss: 1.8882897187162329 | Val Padded_cmAP : 0.8854327205146767



























































































































100%|██████████| 307/307 [04:10<00:00,  1.23it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]






















































































































100%|██████████| 307/307 [04:01<00:00,  1.27it/s]









100%|██████████| 27/27 [00:21<00:00,  1.26it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



























































































































100%|██████████| 307/307 [04:11<00:00,  1.22it/s]










100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]




























































































































100%|██████████| 307/307 [04:14<00:00,  1.20it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]

































































































































100%|██████████| 307/307 [04:25<00:00,  1.16it/s]









 93%|█████████▎| 25/27 [00:20<00:01,  1.41it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]


































































































































100%|██████████| 307/307 [04:26<00:00,  1.15it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

































































































































100%|██████████| 307/307 [04:24<00:00,  1.16it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

































































































































100%|██████████| 307/307 [04:24<00:00,  1.16it/s]









100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



































































































































100%|██████████| 307/307 [04:28<00:00,  1.14it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



































































































































100%|██████████| 307/307 [04:33<00:00,  1.12it/s]










100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]



































































































































100%|██████████| 307/307 [04:28<00:00,  1.14it/s]









100%|██████████| 27/27 [00:22<00:00,  1.23it/s]
  0%|          | 0/307 [00:00<?, ?it/s]

































































































































100%|██████████| 307/307 [04:25<00:00,  1.15it/s]









100%|██████████| 27/27 [00:21<00:00,  1.24it/s]
  0%|          | 0/307 [00:00<?, ?it/s]


































































































































100%|██████████| 307/307 [04:25<00:00,  1.15it/s]









 89%|████████▉ | 24/27 [00:19<00:02,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.24it/s]



































































































































100%|██████████| 307/307 [04:29<00:00,  1.14it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.41it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]




































































































































100%|██████████| 307/307 [04:29<00:00,  1.14it/s]










 96%|█████████▋| 26/27 [00:21<00:00,  1.40it/s]
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]



































































































































100%|██████████| 307/307 [04:29<00:00,  1.14it/s]










100%|██████████| 27/27 [00:21<00:00,  1.68it/s]
Epoch: 50 | Train Loss: 1.3869726125891124 | Val Loss: 1.681381121829704 | Val Padded_cmAP : 0.895626099752856
# Loading best model
100%|██████████| 27/27 [00:21<00:00,  1.25it/s]
  7%|▋         | 2/27 [00:02<00:31,  1.27s/it]
 19%|█▊        | 5/27 [00:04<00:18,  1.20it/s]
 30%|██▉       | 8/27 [00:07<00:14,  1.33it/s]
 41%|████      | 11/27 [00:09<00:11,  1.38it/s]
 52%|█████▏    | 14/27 [00:11<00:09,  1.39it/s]
 59%|█████▉    | 16/27 [00:12<00:07,  1.39it/s]
 70%|███████   | 19/27 [00:14<00:05,  1.40it/s]
 81%|████████▏ | 22/27 [00:17<00:03,  1.40it/s]
 93%|█████████▎| 25/27 [00:19<00:01,  1.40it/s]
wandb :   1%|          | 4/677 [00:00<00:37, 17.79it/s]data.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   1%|          | 4/677 [00:00<00:37, 17.79it/s]data.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
>>> FOLD 2 Primary_Padded_cmAP = 0.896
wandb :   5%|▌         | 34/677 [00:01<00:43, 14.68it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  10%|▉         | 66/677 [00:04<00:44, 13.73it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  14%|█▍        | 97/677 [00:06<00:32, 18.03it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  21%|██        | 139/677 [00:08<00:25, 21.08it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  27%|██▋       | 180/677 [00:10<00:26, 19.07it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  32%|███▏      | 215/677 [00:12<00:28, 16.22it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  34%|███▍      | 232/677 [00:14<00:54,  8.23it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  40%|███▉      | 268/677 [00:16<00:21, 19.41it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  46%|████▌     | 309/677 [00:18<00:12, 29.02it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  52%|█████▏    | 349/677 [00:20<00:19, 16.72it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  57%|█████▋    | 387/677 [00:22<00:13, 22.07it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  62%|██████▏   | 419/677 [00:24<00:20, 12.43it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  68%|██████▊   | 458/677 [00:26<00:10, 21.65it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  73%|███████▎  | 491/677 [00:28<00:11, 16.17it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  77%|███████▋  | 522/677 [00:30<00:08, 17.64it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  82%|████████▏ | 553/677 [00:32<00:04, 25.28it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  86%|████████▌ | 579/677 [00:34<00:09, 10.43it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  86%|████████▌ | 583/677 [00:34<00:12,  7.59it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  88%|████████▊ | 595/677 [00:38<00:12,  6.79it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  94%|█████████▍| 637/677 [00:40<00:01, 20.51it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 677/677 [00:42<00:00, 16.00it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 677/677 [00:42<00:00, 16.00it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`