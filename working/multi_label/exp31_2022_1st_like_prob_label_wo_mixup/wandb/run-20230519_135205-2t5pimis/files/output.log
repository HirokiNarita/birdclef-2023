
  0%|          | 0/316 [00:00<?, ?it/s]
load pre-trained model :  /kaggle/working/WSL/exp10_softmax_model/fold-0.pth
_IncompatibleKeys(missing_keys=['bn0.weight', 'bn0.bias', 'bn0.running_mean', 'bn0.running_var', 'fc1.weight', 'fc1.bias', 'global_pool.p', 'head.weight', 'head.bias'], unexpected_keys=[])
#########################
#### Training
#### Fold: 1 | Image Size: (128, 1001) | Model: tf_efficientnet_b1_ns | Batch Size: 64 | Scheduler: cos





























































































































































100%|██████████| 316/316 [05:53<00:00,  1.12s/it]










100%|██████████| 27/27 [00:24<00:00,  1.08it/s]
Epoch: 1 | Train Loss: 17.55458008035829 | Val Loss: 6.099405447642009 | Val Padded_cmAP : 0.4816463748976355


































































































































































100%|██████████| 316/316 [05:49<00:00,  1.11s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 2 | Train Loss: 6.5282031237324585 | Val Loss: 4.57548568866871 | Val Padded_cmAP : 0.5817112224141803


































































































































































100%|██████████| 316/316 [06:00<00:00,  1.14s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  0%|          | 0/316 [00:00<?, ?it/s]




































































































































































100%|██████████| 316/316 [05:57<00:00,  1.13s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 4 | Train Loss: 4.402805772008775 | Val Loss: 2.461443636152479 | Val Padded_cmAP : 0.8194004501868365



































































































































































100%|██████████| 316/316 [05:50<00:00,  1.11s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]









































































































































































100%|██████████| 316/316 [06:12<00:00,  1.18s/it]










100%|██████████| 27/27 [00:24<00:00,  1.09it/s]
Epoch: 6 | Train Loss: 3.7460350371614286 | Val Loss: 2.215469338275768 | Val Padded_cmAP : 0.8478098709142561








































































































































































100%|██████████| 316/316 [06:04<00:00,  1.15s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]










































































































































































100%|██████████| 316/316 [06:12<00:00,  1.18s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]




































































































































































100%|██████████| 316/316 [06:11<00:00,  1.18s/it]










100%|██████████| 27/27 [00:24<00:00,  1.12it/s]
  0%|          | 0/316 [00:00<?, ?it/s]







































































































































































100%|██████████| 316/316 [06:26<00:00,  1.22s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]







































































































































































100%|██████████| 316/316 [06:26<00:00,  1.22s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]












































































































































































100%|██████████| 316/316 [06:21<00:00,  1.21s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]








































































































































































100%|██████████| 316/316 [06:35<00:00,  1.25s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]















































































































































































100%|██████████| 316/316 [06:32<00:00,  1.24s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 14 | Train Loss: 2.7790251061131683 | Val Loss: 1.8761957927986428 | Val Padded_cmAP : 0.8760543369423317












































































































































































100%|██████████| 316/316 [06:35<00:00,  1.25s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]










































































































































































100%|██████████| 316/316 [06:44<00:00,  1.28s/it]










 93%|█████████▎| 25/27 [00:23<00:01,  1.38it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]




































































































































































100%|██████████| 316/316 [06:42<00:00,  1.27s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 17 | Train Loss: 2.6491266511663607 | Val Loss: 1.8338149079570063 | Val Padded_cmAP : 0.8799107821555116














































































































































































100%|██████████| 316/316 [06:38<00:00,  1.26s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]














































































































































































100%|██████████| 316/316 [06:33<00:00,  1.25s/it]










 96%|█████████▋| 26/27 [00:23<00:00,  1.39it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]








































































































































































100%|██████████| 316/316 [06:26<00:00,  1.22s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 20 | Train Loss: 2.5386494416979293 | Val Loss: 1.8197848796844482 | Val Padded_cmAP : 0.8773355605902803




































































































































































100%|██████████| 316/316 [06:23<00:00,  1.22s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
Epoch: 21 | Train Loss: 2.476626448238952 | Val Loss: 1.7321154872576396 | Val Padded_cmAP : 0.8873671349758734







































































































































































100%|██████████| 316/316 [06:35<00:00,  1.25s/it]










100%|██████████| 27/27 [00:24<00:00,  1.65it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]

















































































































































































100%|██████████| 316/316 [06:30<00:00,  1.23s/it]










 96%|█████████▋| 26/27 [00:23<00:00,  1.38it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]











































































































































































100%|██████████| 316/316 [06:33<00:00,  1.25s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]












































































































































































100%|██████████| 316/316 [06:26<00:00,  1.22s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

































































































































































100%|██████████| 316/316 [06:12<00:00,  1.18s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]


































































































































































100%|██████████| 316/316 [06:19<00:00,  1.20s/it]










100%|██████████| 27/27 [00:24<00:00,  1.12it/s]
  0%|          | 0/316 [00:00<?, ?it/s]












































































































































































100%|██████████| 316/316 [06:22<00:00,  1.21s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]










































































































































































100%|██████████| 316/316 [06:32<00:00,  1.24s/it]










 96%|█████████▋| 26/27 [00:23<00:00,  1.38it/s]
100%|██████████| 27/27 [00:24<00:00,  1.10it/s]











































































































































































100%|██████████| 316/316 [06:29<00:00,  1.23s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 30 | Train Loss: 2.213186375325239 | Val Loss: 1.7522751777260392 | Val Padded_cmAP : 0.8927990486075262









































































































































































100%|██████████| 316/316 [06:21<00:00,  1.21s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
Epoch: 31 | Train Loss: 2.182618600280979 | Val Loss: 1.7390838188153726 | Val Padded_cmAP : 0.892248942976495








































































































































































100%|██████████| 316/316 [06:30<00:00,  1.24s/it]









 93%|█████████▎| 25/27 [00:23<00:01,  1.38it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]








































































































































































100%|██████████| 316/316 [06:36<00:00,  1.25s/it]









100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  0%|          | 0/316 [00:00<?, ?it/s]











































































































































































100%|██████████| 316/316 [06:38<00:00,  1.26s/it]










 96%|█████████▋| 26/27 [00:23<00:00,  1.38it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]














































































































































































100%|██████████| 316/316 [06:36<00:00,  1.26s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
Epoch: 35 | Train Loss: 2.093772698806811 | Val Loss: 1.664963377846612 | Val Padded_cmAP : 0.8960807581234964












































































































































































100%|██████████| 316/316 [06:46<00:00,  1.29s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]









































































































































































100%|██████████| 316/316 [07:11<00:00,  1.36s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

















































































































































































100%|██████████| 316/316 [07:10<00:00,  1.36s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
Epoch: 38 | Train Loss: 2.030920603984519 | Val Loss: 1.6045575208134122 | Val Padded_cmAP : 0.8977736716741668











































































































































































100%|██████████| 316/316 [07:14<00:00,  1.38s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

















































































































































































100%|██████████| 316/316 [07:13<00:00,  1.37s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
Epoch: 40 | Train Loss: 1.9875443656987781 | Val Loss: 1.638465647344236 | Val Padded_cmAP : 0.901048744034576











































































































































































100%|██████████| 316/316 [07:08<00:00,  1.36s/it]










100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]

























































































































































































100%|██████████| 316/316 [07:20<00:00,  1.39s/it]









100%|██████████| 27/27 [00:24<00:00,  1.11it/s]
  0%|          | 0/316 [00:00<?, ?it/s]















































































































































































100%|██████████| 316/316 [07:16<00:00,  1.38s/it]










100%|██████████| 27/27 [00:24<00:00,  1.66it/s]
100%|██████████| 27/27 [00:24<00:00,  1.11it/s]




















































































































































































100%|██████████| 316/316 [07:04<00:00,  1.34s/it]









 93%|█████████▎| 25/27 [00:23<00:01,  1.38it/s]
100%|██████████| 27/27 [00:24<00:00,  1.10it/s]










































































































































































100%|██████████| 316/316 [07:16<00:00,  1.38s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
Epoch: 45 | Train Loss: 1.9000359143637404 | Val Loss: 1.6630149726514463 | Val Padded_cmAP : 0.8989063550923121













































































































































































100%|██████████| 316/316 [07:21<00:00,  1.40s/it]










100%|██████████| 27/27 [00:24<00:00,  1.65it/s]
100%|██████████| 27/27 [00:24<00:00,  1.10it/s]


















































































































































































100%|██████████| 316/316 [07:29<00:00,  1.42s/it]









100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  0%|          | 0/316 [00:00<?, ?it/s]







































































































































































100%|██████████| 316/316 [07:11<00:00,  1.37s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
Epoch: 48 | Train Loss: 1.8955729384965534 | Val Loss: 1.6151696200724002 | Val Padded_cmAP : 0.9014346056907805






































































































































































100%|██████████| 316/316 [06:55<00:00,  1.31s/it]










100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  0%|          | 0/316 [00:00<?, ?it/s]























































































































































































100%|██████████| 316/316 [07:12<00:00,  1.37s/it]










100%|██████████| 27/27 [00:24<00:00,  1.66it/s]
Epoch: 50 | Train Loss: 1.8521194974832897 | Val Loss: 1.6294410736472518 | Val Padded_cmAP : 0.9028897301331383
# Loading best model
100%|██████████| 27/27 [00:24<00:00,  1.10it/s]
  4%|▎         | 1/27 [00:03<01:20,  3.11s/it]
 11%|█         | 3/27 [00:04<00:30,  1.27s/it]
 22%|██▏       | 6/27 [00:06<00:18,  1.15it/s]
 33%|███▎      | 9/27 [00:08<00:13,  1.30it/s]
 44%|████▍     | 12/27 [00:11<00:11,  1.36it/s]
 52%|█████▏    | 14/27 [00:12<00:09,  1.36it/s]
 63%|██████▎   | 17/27 [00:14<00:07,  1.37it/s]
 74%|███████▍  | 20/27 [00:16<00:05,  1.38it/s]
 85%|████████▌ | 23/27 [00:19<00:02,  1.39it/s]
 96%|█████████▋| 26/27 [00:21<00:00,  1.39it/s]
 96%|█████████▋| 26/27 [00:21<00:00,  1.39it/s]
>>> FOLD 1 Primary_Padded_cmAP = 0.903
wandb :   0%|          | 0/669 [00:00<?, ?it/s]andas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :   5%|▌         | 35/669 [00:02<00:29, 21.17it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  10%|█         | 69/669 [00:04<00:30, 19.80it/s]ata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  15%|█▌        | 101/669 [00:06<00:38, 14.67it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  20%|██        | 137/669 [00:08<00:31, 17.06it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  27%|██▋       | 181/669 [00:10<00:21, 22.30it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  31%|███       | 206/669 [00:12<00:33, 13.74it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  36%|███▌      | 239/669 [00:14<00:38, 11.07it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  41%|████      | 271/669 [00:16<00:17, 22.58it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  45%|████▍     | 299/669 [00:20<00:26, 13.72it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  49%|████▊     | 326/669 [00:22<00:27, 12.39it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  53%|█████▎    | 357/669 [00:24<00:16, 18.80it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  57%|█████▋    | 384/669 [00:26<00:20, 14.18it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  61%|██████    | 409/669 [00:28<00:16, 15.63it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  67%|██████▋   | 446/669 [00:30<00:14, 15.84it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  72%|███████▏  | 483/669 [00:32<00:08, 21.13it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  77%|███████▋  | 518/669 [00:34<00:09, 16.41it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  83%|████████▎ | 553/669 [00:36<00:06, 17.92it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  85%|████████▌ | 570/669 [00:38<00:15,  6.57it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  89%|████████▉ | 594/669 [00:40<00:03, 19.01it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  93%|█████████▎| 625/669 [00:42<00:02, 16.56it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb :  99%|█████████▉| 664/669 [00:44<00:00, 20.48it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 669/669 [00:45<00:00, 14.80it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
wandb : 100%|██████████| 669/669 [00:45<00:00, 14.80it/s]ta.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`